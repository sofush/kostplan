@startuml
scale 1920*1080
skinparam classAttributeIconSize 0
enum Role {
	USER
	ADMIN
	CHEF
}
enum WeightGoal {
	GAIN
	LOSS
	EQUILIBRIUM
}
enum ActivityLevel {
	INACTIVE
	LOW
	MODERATE
	HIGH
	VERY_HIGH
}
class User {
	- username: String
	- password: String
	- emailAddress: String
	- phoneNumber: String
	- role: Role
	- weightGoal: WeightGoal
	- activityLevel: ActivityLevel
	- male: boolean
	- weight: int
	- dob: LocalDate
	- height: int
	{method} + ... constructor/getter/setter
	+ List<String> getAuthorities()
}
class Day {
	- date: LocalDate
	- username: String
	- breakfast: Recipe
	- lunch: Recipe
	- dinner: Recipe
	{method} + ... constructor/getter/setter
}
class Recipe {
	- id: Integer
	- week: int
	- title: String
	- description: String
	- ingredients: List<Ingredient>
	- instructions: String
	- time: String
	{method} + ... constructor/getter/setter
	+ double sumCalories()
}
class Ingredient {
	- id: int
	- name: String
	- quantity: double
	- unit: String
	- calories: double
	{method} + ... constructor/getter/setter
	+ double sumCalories()
	+ String toString()
}
class PaymentController {
	- service: PaymentService
	+ PaymentController(PaymentService service)
	+ String subscribe(Principal principal)
}
class UserController {
	- service: UserService
	+ UserController(UserService service)
	+ String login()
	+ String logout()
	+ String registerUser()
	+ String registerUserPost(String username, String password, String repeatPassword, String emailAddress, String phoneNumber, String weightGoal, String activityLevel, String male, String weight, String dob, String height, Model model)
}
class RecipeController {
	- service: UserService
	+ RecipeController(UserService service)
	+ String displayWeek(Integer weekIndex, Principal principal, Model model)
	+ String pickRecipe(String dayOfWeek, String meal, Model model)
	+ String assignRecipeToDay(String dayOfWeek, String meal, Integer recipeId, Principal principal)
	+ String showRecipe(String dayOfWeek, String meal, Principal principal, Model model)
	+ String uploadRecipeImage()
	+ String uploadRecipeImagePost(MultipartFile file, Integer recipeId)
	+ byte[] getRecipeImage(Integer recipeId)
}
class PaymentService {
	- storage: PersistentStorage
	- stripeApiKey: String
	+ PaymentService(PersistentStorage storage)
	+ boolean hasActiveSubscription(String username)
	+ Session createPaymentSession(String username)
	+ Customer retrieveCustomer(String username)
}
class UserService {
	- storage: PersistentStorage
	- encoder: PasswordEncoder
	+ UserService(PersistentStorage storage, PasswordEncoder encoder)
	+ void addUser(String username, String password, String emailAddress, String phoneNumber, String weightGoal, String activityLevel, boolean male, int weight, LocalDate dob, int height)
	+ User findUserByUsername(String username)
	+ void addDay(String username, LocalDate date, Integer breakfastId, Integer lunchId, Integer dinnerId)
	+ void updateDay(String username, LocalDate date, Integer breakfastId, Integer lunchId, Integer dinnerId)
	+ Day findDay(String username, LocalDate date)
	+ List<Day> findDaysOfWeek(String username, int weekIndex)
	+ Recipe findRecipeById(int id)
	+ List<Recipe> findRecipesForWeek(int weekIndex)
	+ byte[] findImageForRecipe(int recipeId)
	+ void addRecipeImage(int recipeId, byte[] imageBytes)
	+ double calculateCalorieGoal(WeightGoal weightGoal, ActivityLevel activityLevel, boolean male, int weight, int height, LocalDate dob)
	+ void scaleRecipe(double calorieGoal, Recipe recipe, List<Recipe> scheduledMeals)
}
class MysqlRepository {
	- jdbc: JdbcTemplate
	+ MysqlRepository(JdbcTemplate jdbc)
	+ void addUser(User user)
	+ User findUserByUsername(String username)
	+ void addDay(Day day)
	+ void updateDay(Day day)
	+ Day findDay(String username, LocalDate date)
	+ Recipe findRecipeById(int id)
	+ List<Ingredient> findIngredientsForRecipe(int id)
	+ List<Recipe> findRecipesForWeek(int weekIndex)
	+ byte[] findRecipeImage(int recipeId)
	+ void addRecipeImage(int recipeId, byte[] imageBytes)
}
interface PersistentStorage {
	+ void addUser(User user)
	+ User findUserByUsername(String username)
	+ void addDay(Day day)
	+ void updateDay(Day day)
	+ Day findDay(String username, LocalDate date)
	+ Recipe findRecipeById(int id)
	+ List<Recipe> findRecipesForWeek(int weekIndex)
	+ byte[] findRecipeImage(int recipeId)
	+ void addRecipeImage(int recipeId, byte[] imageBytes)
}
class DateUtil {
	- WEEK_ORIGIN: LocalDate
	- DateUtil()
	+ List<LocalDate> calculateDatesOfNthWeek(int weekIndex)
	+ int calculateCurrentWeekIndex()
}

circle " " as entities

' Controller, Service, Repository
UserController o-- UserService
PaymentController o-- PaymentService
UserService o-- PersistentStorage
PaymentService o-- PersistentStorage
RecipeController o-- UserService
PersistentStorage <|- MysqlRepository

' Util
RecipeController ..> DateUtil

' Entities
entities ..> User
entities ..> Role
entities ..> WeightGoal
entities ..> ActivityLevel
entities ..> Day
entities ..> Recipe
entities ..> Ingredient
Role " 1 " *-- " 1 " User
WeightGoal " 1 " *-- " 1 " User
ActivityLevel " 1 " *-- " 1 " User
Day " 1 " *-- " 0..3 " Recipe
Recipe " 1 " *-- " 1..m " Ingredient
RecipeController ..> entities
UserService ..> entities
PaymentService ..> User
MysqlRepository ..> entities
PersistentStorage ..> entities

' Improved placement
User -r[hidden]-- Recipe
PaymentService -r[hidden]-- UserService
@enduml
